pipeline {
    agent any
     
    stages {
        stage('Build') {
            steps {
                bat 'docker build -t dotnet .'
                bat "\"C:/Program Files/dotnet/dotnet.exe\" restore \"${workspace}/MVC Project.sln\""
                bat "\"C:/Program Files/dotnet/dotnet.exe\" build \"${workspace}/MVC Project.sln\""
                
            }
        }
        stage('Test') {
            steps {
                bat returnStatus: true, script: "\"C:/Program Files/dotnet/dotnet.exe\" dotnet test \"${workspace}/MVC Project.sln\" "
                }
            post {
                always {
                    echo "Post-Test res: ${currentBuild.result}"
                    echo "Post-Test currentResult: ${currentBuild.currentResult}"
                    script {
                        def failed = publishCoverage (failUnhealthy: true, 
                                    globalThresholds: [[thresholdTarget: 'Package', unhealthyThreshold: 50.0]],
                                    adapters: [coberturaAdapter(
                                        mergeToOneReport: true, 
                                        path: '**/*.cobertura.xml')])
                        if (failed) {
                            currentBuild.result = 'FAILURE'
                            currentBuild.displayName = "${currentBuild.displayName} Coverage"
                            currentBuild.description = "Coverage lower than 50%"
                        }
                    }
    }
}
        }
    
    }
}